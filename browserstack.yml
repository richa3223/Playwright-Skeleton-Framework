# ======================
# BrowserStack Reporting
# ======================
# The following capabilities are used to set up reporting on BrowserStack:
# Set 'projectName' to the name of your project. Example, Marketing Website
projectName: Playwright Skeleton Framework
# Set `buildName` as the name of the job / testsuite being run
buildName: Playwright Skeleton Build 
# `buildIdentifier` is a unique id to differentiate every execution that gets appended to
# buildName. Choose your buildIdentifier format from the available expressions:
# ${BUILD_NUMBER} (Default): Generates an incremental counter with every execution
# ${DATE_TIME}: Generates a Timestamp with every execution. Eg. 05-Nov-19:30
# Read more about buildIdentifiers here -> https://www.browserstack.com/docs/automate/playwright/organize-tests
buildIdentifier: '#${BUILD_NUMBER}' # Supports strings along with either/both ${expression}

# =======================================
# Platforms (Browsers / Devices to test)
# =======================================
# Platforms object contains all the browser / device combinations you want to test on.
# Entire list available here -> (https://www.browserstack.com/list-of-browsers-and-platforms/automate)
platforms:
## Desktop Config 
  - os: Windows
    osVersion: 11
    browserName: chrome
    browserVersion: latest
    playwrightConfigOptions:
      name: Windows11ChromeLatest # This will be the name of the 'project' in Browserstack runs
      setup: 
      - name: 'authSetupWindows11ChromeLatest' # Setup needs to be unique with unique names per project config, so this is not reusable
        testMatch: '**/auth.setup.ts'
      testMatch: &desktopTests # This is the matching of the test specs (by regex). The use of `&desktop` allows for reuse by subsequent project config. You can pass in multiple matches, though the Browserstack docs do not mention this.
      - /**/multidevice/**/*.spec.ts # If you're matching by regex, do not add quotes around the test matches, otherwise browserstack will treat them as string literals.
      - /**/desktop/**/*.spec.ts

  - os: Windows
    osVersion: 11
    browserName: Edge
    browserVersion: latest
    playwrightConfigOptions:
      name: Windows11EdgeLatest
      setup: 
      - name: 'authSetupWindows11EdgeLatest'
        testMatch: '**/auth.setup.ts'
    testMatch: *desktopTests

  - os: OS X
    osVersion: Ventura
    browserName: playwright-webkit
    browserVersion: latest
    playwrightConfigOptions:
      name: OSXVenturaWebkitLatest
      setup:
      - name: 'authSetupOSXVenturaWebkitLatest'
        testMatch: '**/auth.setup.ts'
      testMatch: *desktopTests  

## iOS Emulation
  - os: OS X
    osVersion: Ventura
    browserName: chrome
    browserVersion: latest
    playwrightConfigOptions:
      name: iPhone11_emulated
      setup:
      - name: 'authSetupiPhone11_emulated'
        testMatch: '**/auth.setup.ts'
      testMatch: &mobileTests
      - /**/multidevice/**/*.spec.ts
      - /**/mobile/**/*.spec.ts
    use:
      deviceName: iPhone 11

### Android Real Devices
# As of browserstack-node-sdk there are various issues with real android device usage and Playwright.
# The authentication step from auth.config.ts is not properly applied, we are unsure if this is related to Session Storage or Cookie Authentication.
# You may wish to add real devices here, but be aware that tests may not function as expected. For now, it is encouraged to use Browserstack to emulate devices only.

# =======================
# Parallels per Platform
# =======================
# The number of parallel threads to be used for each platform set.
# BrowserStack's SDK runner will select the best strategy based on the configured value
#
# Example 1 - If you have configured 3 platforms and set `parallelsPerPlatform` as 2, a total of 6 (2 * 3) parallel threads will be used on BrowserStack
#
# Example 2 - If you have configured 1 platform and set `parallelsPerPlatform` as 5, a total of 5 (1 * 5) parallel threads will be used on BrowserStack
parallelsPerPlatform: 1

# ==========================================
# BrowserStack Local
# (For localhost, staging/private websites)
# ==========================================
# Set browserStackLocal to true if your website under test is not accessible publicly over the internet
# Learn more about how BrowserStack Local works here -> https://www.browserstack.com/docs/automate/playwright/getting-started/nodejs/local-testing-sdk
browserstackLocal: true # <boolean> (Default false)
# browserStackLocalOptions:
# Options to be passed to BrowserStack local in-case of advanced configurations
  # localIdentifier: # <string> (Default: null) Needed if you need to run multiple instances of local.
  # forceLocal: true  # <boolean> (Default: false) Set to true if you need to resolve all your traffic via BrowserStack Local tunnel.
  # Entire list of arguments available here -> https://www.browserstack.com/docs/automate/selenium/manage-incoming-connections n.b the link provided is for selenium and may not work as expected.

# ===================
# Debugging features
# ===================
debug: false # <boolean> # Set to true if you need screenshots for every Playwright command ran
networkLogs: true # <boolean> Set to true to enable HAR logs capturing
consoleLogs: info # <string> Remote browser's console debug levels to be printed (Default: errors)
# Available options are `disable`, `errors`, `warnings`, `info`, `verbose` (Default: errors, but 'info will be more helpful')
# CUSTOM_TAG_<INT>: # <string> (Default: parent folder name of the test file) Custom tag for your test suite

# Test Observability is an intelligent test reporting & debugging product. It collects data using the SDK. Read more about what data is collected at https://www.browserstack.com/docs/test-observability/references/terms-and-conditions
# Visit observability.browserstack.com to see your test reports and insights. To disable test observability, specify `testObservability: false` in the key below.
testObservability: true
